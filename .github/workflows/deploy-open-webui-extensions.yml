name: Deploy Plugins

on:
  push:
    branches: [development, alpha-preview, main]
    paths:
      - "functions/pipes/**/*.py"
      - "functions/filters/**/*.py"
      - "tools/**/*.py"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.changed.outputs.any_changed }}
      changed_files: ${{ steps.changed.outputs.all_changed_files }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - id: changed
        uses: tj-actions/changed-files@v43
        with:
          files: |
            functions/pipes/**/*.py
            functions/filters/**/*.py
            tools/**/*.py
          json: true
      - name: No changes found
        if: steps.changed.outputs.any_changed != 'true'
        run: echo "No plugin updates detected; workflow will exit."

  gather-environments:
    needs: check-changes
    if: needs.check-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # So 'gh' can authenticate
    outputs:
      environment_list: ${{ steps.collect.outputs.environment_list }}
    steps:
      - name: Fetch environment names
        id: collect
        run: |
          # 1) Get all environment data from GitHub
          full_json=$(gh api "repos/${{ github.repository }}/environments")

          # 2) Extract just the names into a JSON array:
          env_list=$(echo "$full_json" | jq -r '.environments | map(.name) | @json')

          # 3) Write the array to GITHUB_OUTPUT as environment_list
          echo "environment_list=$env_list" >> "$GITHUB_OUTPUT"

  deploy-plugins:
    needs: [check-changes, gather-environments]
    if: needs.check-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment_name: ${{ fromJson(needs.gather-environments.outputs.environment_list) }}
      fail-fast: false
    environment: ${{ matrix.environment_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Prepare changed plugin files
        id: changed
        run: |
          echo "all_changed_files=${{ needs.check-changes.outputs.changed_files }}" >> "$GITHUB_OUTPUT"
          echo "any_changed=${{ needs.check-changes.outputs.has_changes }}" >> "$GITHUB_OUTPUT"

      - name: Load environment variables
        id: load-env
        run: |
          # This environment variable is stored in each environment's config
          echo "TARGET_BRANCH=${{ env.TARGET_BRANCH }}" >> $GITHUB_ENV
          echo "WEBUI_URL=${{ env.WEBUI_URL }}" >> $GITHUB_ENV

      - name: Deploy
        if: ${{ steps.changed.outputs.any_changed == 'true' && github.ref_name == env.TARGET_BRANCH }}
        env:
          WEBUI_URL: ${{ env.WEBUI_URL }}
          WEBUI_KEY: ${{ secrets.WEBUI_KEY }}   # secret stored per-environment
        run: |
          echo "${{ steps.changed.outputs.all_changed_files }}" \
            | jq -r '.[]' \
            | while IFS= read -r file; do
                echo "Publishing $file to '${{ matrix.environment_name }}'â€¦"
                # Determine plugin type from path
                if [[ "$file" == functions/pipes/* ]]; then
                  type=pipe
                elif [[ "$file" == functions/filters/* ]]; then
                  type=filter
                elif [[ "$file" == tools/* ]]; then
                  type=tool
                else
                  type=pipe
                fi
                python .scripts/publish_to_webui.py "$file" --type "$type"
              done

      - name: Skip
        if: ${{ steps.changed.outputs.any_changed == 'true' && github.ref_name != env.TARGET_BRANCH }}
        run: echo "Skipping '${{ matrix.environment_name }}' (branch mismatch)"
