name: Deploy Plugins

on:
  push:
    branches: [dev, beta, main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  gather-environments:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # So 'gh' can authenticate
    outputs:
      environment_list: ${{ steps.collect.outputs.environment_list }}
    steps:
      - name: Fetch environment names
        id: collect
        run: |
          full_json=$(gh api "repos/${{ github.repository }}/environments")
          env_list=$(echo "$full_json" | jq -r '.environments[].name')
          json_list=$(echo "$env_list" | jq -R . | jq -s .)
          echo "environment_list=$json_list" >> "$GITHUB_OUTPUT"

  deploy-plugins:
    needs: gather-environments
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment_name: ${{ fromJson(needs.gather-environments.outputs.environment_list) }}
      fail-fast: false
    environment: ${{ matrix.environment_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Identify changed files
        id: changed
        uses: tj-actions/changed-files@v43
        with:
          files: |
            functions/pipes/**/*.py
            functions/filters/**/*.py
            tools/**/*.py
          json: true

      - name: Load environment variables
        id: load-env
        run: |
          echo "TARGET_BRANCH=${{ env.TARGET_BRANCH }}" >> $GITHUB_ENV
          echo "WEBUI_URL=${{ env.WEBUI_URL }}" >> $GITHUB_ENV

      - name: Deploy
        if: ${{ steps.changed.outputs.any_changed == 'true' && github.ref_name == env.TARGET_BRANCH }}
        env:
          WEBUI_URL: ${{ env.WEBUI_URL }}
          WEBUI_KEY: ${{ secrets.WEBUI_KEY }}
        run: |
          echo "${{ steps.changed.outputs.all_changed_files }}" \
            | jq -r '.[]' \
            | while IFS= read -r file; do
                echo "Publishing $file to '${{ matrix.environment_name }}'..."
                if [[ "$file" == functions/pipes/* ]]; then
                  type=pipe
                elif [[ "$file" == functions/filters/* ]]; then
                  type=filter
                elif [[ "$file" == tools/* ]]; then
                  type=tool
                else
                  type=pipe
                fi
                python .scripts/publish_to_webui.py "$file" --type "$type"
              done

      - name: Skip
        if: ${{ steps.changed.outputs.any_changed == 'true' && github.ref_name != env.TARGET_BRANCH }}
        run: echo "Skipping '${{ matrix.environment_name }}' (branch mismatch)"
