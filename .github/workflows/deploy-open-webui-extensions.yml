name: Deploy Plugins

on:
  push:
    branches: [dev, beta, main]
  # Also allow manual triggers for demonstration
  workflow_dispatch:

permissions:
  contents: read
  # If you need to pull environment info via the GitHub CLI, you may also need additional permissions.

jobs:
  # 1) Gather the list of environment names in this repo
  gather-environments:
    runs-on: ubuntu-latest
    outputs:
      environment_list: ${{ steps.collect.outputs.environment_list }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Collect environment names
        id: collect
        run: |
          # Use GitHub CLI to list your repo's environments.
          # e.g., "client-foo" "client-bar" "production" etc.
          # The --jq option prints each environment name on a separate line.
          env_list=$(gh api repos/${{ github.repository }}/environments --jq '.environments[].name')

          # Now convert those lines into a JSON array for the matrix:
          # e.g. ["client-foo","client-bar","production"]
          json_list=$(echo "$env_list" | jq -R . | jq -s .)

          echo "environment_list=$json_list" >> "$GITHUB_OUTPUT"

  # 2) Deploy to each environment in parallel via matrix
  deploy-plugins:
    needs: gather-environments
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment_name: ${{ fromJson(needs.gather-environments.outputs.environment_list) }}
      fail-fast: false

    # This sets which environment's secrets we use in this matrix iteration
    environment: ${{ matrix.environment_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install jq
        # 'ubuntu-latest' typically has jq pre-installed, but just in case:
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get changed plugin files
        id: changed
        uses: tj-actions/changed-files@v43
        with:
          files: |
            functions/pipes/**/*.py
            functions/filters/**/*.py
            tools/**/*.py
          json: true

      - name: Load environment secrets (TARGET_BRANCH, etc.)
        id: load-env
        # We rely on 'environment: ${{ matrix.environment_name }}' to get secrets
        # This step writes TARGET_BRANCH to an env var so we can compare easily
        run: echo "TARGET_BRANCH=${{ secrets.TARGET_BRANCH }}" >> $GITHUB_ENV

      - name: Deploy
        # Compare the branch name directly to your env.TARGET_BRANCH
        if: ${{ steps.changed.outputs.any_changed == 'true' && github.ref_name == env.TARGET_BRANCH }}
        env:
          WEBUI_URL: ${{ secrets.WEBUI_URL }}
          WEBUI_KEY: ${{ secrets.WEBUI_KEY }}
        run: |
          echo "${{ steps.changed.outputs.all_changed_files }}" \
            | jq -r '.[]' \
            | while IFS= read -r file; do
                echo "Deploying $file to '${{ matrix.environment_name }}' environment..."

                if [[ "$file" == functions/pipes/* ]]; then
                  type=pipe
                elif [[ "$file" == functions/filters/* ]]; then
                  type=filter
                elif [[ "$file" == tools/* ]]; then
                  type=tool
                else
                  type=pipe
                fi
                python .scripts/publish_to_webui.py "$file" --type "$type"
              done

      - name: Skip Deploy
        if: ${{ steps.changed.outputs.any_changed == 'true' && github.ref_name != env.TARGET_BRANCH }}
        run: echo "Skipping deploy for '${{ matrix.environment_name }}' because it targets '${{ env.TARGET_BRANCH }}' but we're on '${{ github.ref_name }}' branch."
