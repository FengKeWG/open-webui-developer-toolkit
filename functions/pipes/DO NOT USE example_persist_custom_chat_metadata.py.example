"""
DO NOT USE _ THIS DOES NOT WORK.

---


title: Example Persisting Custom Chat Metadata
id: example_persist_custom_chat_metadata
author: Justin Kropp
author_url: https://github.com/jrkropp
version: 1.0.1
license: MIT
description: Demonstrates how to store additional custom metadata directly in chat messages, allowing you to save and later access structured data without displaying it to users in the chat interface.

  ### Practical example:
  - Cache expensive or rate-limited tool results for quick retrieval in future interactions.
  - Retain detailed logs or results of actions performed by the assistant for debugging or analytics purposes.
"""

from __future__ import annotations

import json
import time
from typing import Dict, Any

from open_webui.models.chats import Chats


class Pipe:
    """Pipe demonstrating metadata-only updates on chat messages."""

    async def pipe(self, body: Dict[str, Any], __metadata__: Dict[str, Any]):
        chat_id = __metadata__.get("chat_id")
        message_id = __metadata__.get("message_id")
        user_msg = body["messages"][-1]["content"]

        # ------------------------------------------------------------------
        # Simulate a normal assistant response (content will be updated)
        # ------------------------------------------------------------------
        simulated_response = {
            "role": "assistant",
            "content": f"Echo: {user_msg}",
            "processed_at": int(time.time()),
        }
        Chats.upsert_message_to_chat_by_id_and_message_id(chat_id, message_id, simulated_response)
        stored_response = Chats.get_message_by_id_and_message_id(chat_id, message_id)

        # ------------------------------------------------------------------
        # Add hidden metadata (e.g., cached results from a tool call)
        # ------------------------------------------------------------------
        hidden_tool_data = {
            "custom_flag": True,
            "tool_result": {
                "temperature_c": 21,
                "condition": "Partly Cloudy",
            },
        }

        # Append hidden data without altering visible content
        Chats.upsert_message_to_chat_by_id_and_message_id(chat_id, message_id, hidden_tool_data)
        stored_with_metadata = Chats.get_message_by_id_and_message_id(chat_id, message_id)

        # ------------------------------------------------------------------
        # Display results clearly in chat
        # ------------------------------------------------------------------
        result = (
            "### After assistant response\n```json\n"
            + json.dumps(stored_response, indent=4)
            + "\n```\n\n"
            + "### After adding hidden tool data\n```json\n"
            + json.dumps(stored_with_metadata, indent=4)
            + "\n```"
        )
        yield result
